## library for parsing ocamlfind META files

load("@rules_cc//cc:defs.bzl",
     "cc_binary",
     "cc_library")
load("@rules_foreign_cc//foreign_cc:defs.bzl",
     "configure_make",
     "make")

# we export these srcs so //src/include/obazl:mkhdrs can generate the export interface obazl.h
exports_files([
    "api.c",
    "metaparser_impl.c",
    "meta_entries.c",
    "meta_flags.c",
    "meta_packages.c",
    "meta_properties.c",
    "meta_settings.c",
    "meta_values.c",
    "driver.c",
    # "utils.c"
])

##########
cc_library(
    name  = "obazl_meta",
    alwayslink = True,
    linkstatic = 1,
    srcs  = [
        "driver.c",
        "metaparser_impl.c",
        "api.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "@uthash//:include",
    ],
    hdrs = [
        ":api.h",
        ":driver.h",
        ":metaparser_impl.h",
        ":meta_entries.h",
        ":meta_flags.h",
        ":meta_packages.h",
        ":meta_properties.h",
        ":meta_settings.h",
        ":meta_values.h",
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    copts = [
        "-std=c11",
        "-I$(GENDIR)/src/lib/obazl_meta",
        "-I$(GENDIR)/external/obazl/src/lib/obazl_meta",
        "-I$(GENDIR)/external/tools_obazl/src/lib/obazl_meta",

        "-I", "external/uthash/include",
        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",
    ],
    deps = [
        ":metaparser",
        ":metalexer",
        "//vendored/logc"
    ],
    visibility = ["//visibility:public"]
)

##########
cc_library(
    name  = "metaparser",
    srcs  = [
        "metaparser.c",
        "metaparser.h",
        "@uthash//:include"
    ],
    copts = [
        "-std=c11",
        # "-g",
        "-I", ".",
        "-I", "external/uthash/include",
        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",
        "-U", "NDEBUG"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    linkstatic = 1,
    deps = [
        "//src/lib/obazl_utils",
        # "//:uthash",
        "//vendored/logc"
    ]
)

########
genrule(
    name = "gen_metaparse",
    srcs = [
        "metaparser.y",
        "//vendored/lemon:lempar.c"
    ],
    tools = ["//vendored/lemon"],
    outs  = [
        "metaparser.c",
        # "metaparser.h",
        "metaparser.out"
    ],
    cmd   = "\n".join([
        "$(location //vendored/lemon) -m \\",
        "$(location metaparser.y) \\",
        "-T$(location //vendored/lemon:lempar.c) \\",
        "-d$(RULEDIR)",
    ]),
    visibility = ["//visibility:public"]
)

## lexer

##########
cc_library(
    name  = "metalexer",
    srcs  = [
        ":metalexer.c",
        ":metalexer.h",
        ":metaparser.h",
        # ":driver.h",
        "@uthash//:include",
    ],
    copts = [
        "-std=c11",
        "-I", "external/uthash/include",
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    linkstatic = 1
)

########
genrule(
    name = "gen_metalexer",
    srcs = ["metalexer.re"],
    tools = ["//external/re2c"],
    outs  = ["metalexer.c"],
    cmd   = "\n".join([
        "for f in $(locations //external/re2c)",
        "do",
        "    if [ -f $$f ]",
        "    then",
        "        if [ re2c = `basename $$f` -a -x $$f ]",
        "        then",
        "            break",
        "        fi",
        "    fi",
        "done",
        "$$f -o $@ $<",
    ]),
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs",
    srcs = [
        "api.c",
        # "debug.c",
        "metalexer.c",
        "metaparser.c",
        "metaparser_impl.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "driver.c",
        "//src/lib/obazl_utils:obazl_utils.c",
        # "@uthash//:include"
    ],
    outs = [
        "api.h",
        "metalexer.h",
        "metaparser.h",
        "metaparser_impl.h",
        "meta_entries.h",
        "meta_flags.h",
        "meta_packages.h",
        "meta_properties.h",
        "meta_settings.h",
        "meta_values.h",
        # "utils.h",
        "driver.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location driver.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location @makeheaders//:makeheaders) \\",
        # "    $(locations @uthash//:include)",
        "    $(location //src/lib/obazl_utils:obazl_utils.c) \\",
        "    $(location api.c) \\",
        "    $(location metalexer.c) \\",
        "    $(location metaparser.c) \\",
        "    $(location metaparser_impl.c) \\",
        "    $(location meta_entries.c) \\",
        "    $(location meta_flags.c) \\",
        "    $(location meta_packages.c) \\",
        "    $(location meta_properties.c) \\",
        "    $(location meta_settings.c) \\",
        "    $(location meta_values.c) \\",
        "    $(location driver.c)",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["@makeheaders//:makeheaders"]
)

# ###########
# cc_library(
#     name = "utils",
#     srcs = [
#         "utils.c",
#         "utils.h",
#         "@uthash//:include",
#     ],
#     # hdrs = [
#     #     "utils.h",
#     # ] + glob(["**/*.h"]),
#     includes = glob(["*.h"]),

#     copts = [
#         "-I", "external/uthash/include",
#         # to get the hdr generated by :mkhdrs:
#         "-I", "$(GENDIR)/src/lib/obazl_meta",  ## local build
#         "-I", "$(GENDIR)/external/tools_obazl/src/lib/obazl_meta",  ## remote build
#     ],
#     linkstatic=1,
#     visibility = ["//visibility:public"]
# )


###########
cc_library(
    name = "uthash",
    srcs = [
        "@uthash//:include"
    ],
    includes = [
        "@uthash//:include"
    ],
    linkstatic=1,
    visibility = ["//visibility:public"]
)
